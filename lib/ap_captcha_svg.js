/**
 * SVG captcha.
 * DO NOT use svg base captcha in production, since it may be parsable by bots.
 * You need to convert to bitmap like png beforehand.
 * @constructor ApCaptchaSvg
 */

"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

const React = require('react'),
      ReactDOM = require('react-dom'),
      randomval = require('randomval'),
      numcal = require('numcal'),
      types = React.PropTypes;

/** @lends ApCaptchaSvg */
let ApCaptchaSvg = React.createClass({
    displayName: 'ApCaptchaSvg',

    //--------------------
    // Specs
    //--------------------

    propsTypes: {
        version: types.string,
        text: types.string.isRequired,
        width: types.number,
        height: types.number
    },

    getDefaultProps: function () {
        return {
            version: '1.1',
            xmlns: 'http://www.w3.org/2000/svg',
            text: null,
            width: 240,
            height: 120
        };
    },

    render: function () {
        let s = this,
            props = s.props;

        let color = '#555';
        let text = props.text.split('').map((letter, i, letters) => {
            let indices = [0, 1, 2, 3, 4, 5],
                real = randomval.randomInt(0, indices.length - 1);

            let texts = indices.map(j => {
                let rate = (i + 0.5) / letters.length,
                    key = `letter-${ i }-${ j }`;
                if (j === real) {
                    return s._renderLetter(letter, rate, {
                        key: key,
                        fill: color
                    });
                } else {
                    return s._renderLetter(s._dummyLetter(), rate, {
                        key: key,
                        fill: `rgba(255,255,255,${ 0.01 * Math.random() })`
                    });
                }
            });
            return React.createElement(
                'g',
                { key: `letter-group-${ i }` },
                texts
            );
        });
        let width = props.width,
            height = props.height;
        return React.createElement(
            'svg',
            { version: props.version,
                width: width,
                height: height,
                viewBox: `0 0 ${ width } ${ height }`
            },
            React.createElement(
                'g',
                null,
                text
            )
        );
    },

    //--------------------
    // Specs
    //--------------------

    _renderLetter: function (letter, rate, textProps) {
        let s = this,
            props = s.props;

        let padding = 8;

        let w = props.width - padding * 2,
            h = props.height;

        let moveRange = numcal.min(h / 10, 20),
            move = randomval.randomInt.bind(randomval, moveRange * -1, moveRange);

        let x = padding + w * rate + move(),
            y = h / 2 + move(),
            rotate = randomval.randomInt(-45, 45);

        return React.createElement(
            'text',
            _extends({ x: x,
                y: y,
                fontSize: h / 3,
                transform: `rotate(${ rotate }, ${ x }, ${ y })`
            }, textProps),
            letter
        );
    },

    _dummyLetter: function () {
        const letters = "1234567890abcdefg";
        let len = letters.length;
        return letters[randomval.randomInt(0, len - 1)];
    }

});

module.exports = ApCaptchaSvg;
//# sourceMappingURL=data:application/json;base64,