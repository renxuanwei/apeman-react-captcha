/**
 * Style for ApCaptcha.
 * @constructor ApCaptchaStyle
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApCaptchaStyle */
let ApCaptchaStyle = React.createClass({
    displayName: 'ApCaptchaStyle',

    propTypes: {
        scoped: types.bool,
        style: types.object
    },
    getDefaultProps: function () {
        return {
            scoped: false,
            style: {}
        };
    },
    render: function () {
        let s = this,
            props = s.props;
        let data = {
            '.ap-captcha': {
                display: `inline-block`
            },
            '.ap-captcha-image': {
                background: `white`,
                border: `1px solid #F0F0F0`
            },
            '.ap-captcha-refresh-button': {
                display: `block`,
                textAlign: `right`,
                cursor: `pointer`,
                padding: `4px 2px`,
                fontSize: `12px`
            },
            '.ap-captcha-refresh-button:active': {
                opacity: 0.8
            }
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});

module.exports = ApCaptchaStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF9jYXB0Y2hhX3N0eWxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUtBLFlBQVksQ0FBQzs7QUFFYixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO01BQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUztNQUN2QixNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUMxQixPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDOzs7QUFBQyxBQUd2RCxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFDbkMsYUFBUyxFQUFFO0FBQ1AsY0FBTSxFQUFFLEtBQUssQ0FBQyxJQUFJO0FBQ2xCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtLQUN0QjtBQUNELG1CQUFlLEVBQUUsWUFBWTtBQUN6QixlQUFPO0FBQ0gsa0JBQU0sRUFBRSxLQUFLO0FBQ2IsaUJBQUssRUFBRSxFQUFFO1NBQ1osQ0FBQTtLQUNKO0FBQ0QsVUFBTSxFQUFFLFlBQVk7QUFDaEIsWUFBSSxDQUFDLEdBQUcsSUFBSTtZQUNSLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3BCLFlBQUksSUFBSSxHQUFHO0FBQ0gseUJBQWEsRUFBRTtBQUNYLHVCQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7YUFDMUI7QUFDRCwrQkFBbUIsRUFBRTtBQUNqQiwwQkFBVSxFQUFFLENBQUMsS0FBSyxDQUFDO0FBQ25CLHNCQUFNLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQzthQUM5QjtBQUNELHdDQUE0QixFQUFFO0FBQzFCLHVCQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUM7QUFDaEIseUJBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztBQUNsQixzQkFBTSxFQUFFLENBQUMsT0FBTyxDQUFDO0FBQ2pCLHVCQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUM7QUFDbEIsd0JBQVEsRUFBRSxDQUFDLElBQUksQ0FBQzthQUNuQjtBQUNELCtDQUFtQyxFQUFFO0FBQ2pDLHVCQUFPLEVBQUUsR0FBRzthQUNmO1NBQ0o7WUFDRCxjQUFjLEdBQUcsRUFBRTtZQUNuQixlQUFlLEdBQUcsRUFBRTtZQUNwQixjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLGVBQ0k7QUFBQyxtQkFBTztjQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxBQUFDO0FBQ3JCLG9CQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEFBQUM7QUFDaEMsOEJBQWMsRUFBRSxjQUFjLEFBQUM7QUFDL0IsK0JBQWUsRUFBRSxlQUFlLEFBQUM7QUFDakMsOEJBQWMsRUFBRSxjQUFjLEFBQUM7O1lBQ3RDLEtBQUssQ0FBQyxRQUFRO1NBQVcsQ0FDN0I7S0FDTDtDQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyIsImZpbGUiOiJhcF9jYXB0Y2hhX3N0eWxlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9va3VuaXNoaXRha2EvcHJvamVjdHMvYXBlbWFuLXJlYWN0LWxhYm8vYXBlbWFuLXJlYWN0LWNhcHRjaGEvbGliL2pzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwQ2FwdGNoYS5cbiAqIEBjb25zdHJ1Y3RvciBBcENhcHRjaGFTdHlsZVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdHlwZXMgPSBSZWFjdC5Qcm9wVHlwZXMsXG4gICAgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJyksXG4gICAgQXBTdHlsZSA9IHJlcXVpcmUoJ2FwZW1hbi1yZWFjdC1zdHlsZScpWydBcFN0eWxlJ107XG5cbi8qKiBAbGVuZHMgQXBDYXB0Y2hhU3R5bGUgKi9cbmxldCBBcENhcHRjaGFTdHlsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgc2NvcGVkOiB0eXBlcy5ib29sLFxuICAgICAgICBzdHlsZTogdHlwZXMub2JqZWN0XG4gICAgfSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjb3BlZDogZmFsc2UsXG4gICAgICAgICAgICBzdHlsZToge31cbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBzID0gdGhpcyxcbiAgICAgICAgICAgIHByb3BzID0gcy5wcm9wcztcbiAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgJy5hcC1jYXB0Y2hhJzoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgaW5saW5lLWJsb2NrYFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC1jYXB0Y2hhLWltYWdlJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBgd2hpdGVgLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgI0YwRjBGMGBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtY2FwdGNoYS1yZWZyZXNoLWJ1dHRvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiBgcmlnaHRgLFxuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IGBwb2ludGVyYCxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogYDRweCAycHhgLFxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogYDEycHhgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWNhcHRjaGEtcmVmcmVzaC1idXR0b246YWN0aXZlJzoge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc21hbGxNZWRpYURhdGEgPSB7fSxcbiAgICAgICAgICAgIG1lZGl1bU1lZGlhRGF0YSA9IHt9LFxuICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGEgPSB7fTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxBcFN0eWxlIHNjb3BlZD17cHJvcHMuc2NvcGVkfVxuICAgICAgICAgICAgICAgICAgICAgZGF0YT17ZXh0ZW5kKGRhdGEsIHByb3BzLnN0eWxlKX1cbiAgICAgICAgICAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhPXtzbWFsbE1lZGlhRGF0YX1cbiAgICAgICAgICAgICAgICAgICAgIG1lZGl1bU1lZGlhRGF0YT17bWVkaXVtTWVkaWFEYXRhfVxuICAgICAgICAgICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGE9e2xhcmdlTWVkaWFEYXRhfVxuICAgICAgICAgICAgPntwcm9wcy5jaGlsZHJlbn08L0FwU3R5bGU+XG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBDYXB0Y2hhU3R5bGU7XG4iXX0=